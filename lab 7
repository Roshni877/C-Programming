#include &lt;stdio.h&gt;
#define MAX_ITEMS 100

double computeMaxValue(double W, double weight[], double value[], double
ratio[], int nItems);
int getNextItem(double weight[], double value[], double ratio[], int nItems);

int main() {
int nItems;
double W; /* capacity of the knapsack */
double weight[MAX_ITEMS]; // Weights of &#39;n&#39; items
double value[MAX_ITEMS]; // Values of &#39;n&#39; items
double ratio[MAX_ITEMS]; // ratio or density of &#39;n&#39; items

printf(&quot;Enter the number of items: &quot;);
scanf(&quot;%d&quot;, &amp;nItems);

printf(&quot;Enter the weights of the items:\n&quot;);
for (int i = 0; i &lt; nItems; i++) {

scanf(&quot;%lf&quot;, &amp;weight[i]);
}

printf(&quot;Enter the values/profits of the items:\n&quot;);
for (int i = 0; i &lt; nItems; i++) {
scanf(&quot;%lf&quot;, &amp;value[i]);
}

for (int i = 0; i &lt; nItems; i++) {
ratio[i] = value[i] / weight[i];
}

printf(&quot;Enter the Capacity of the knapsack: &quot;);
scanf(&quot;%lf&quot;, &amp;W);

printf(&quot;\nThe maximum value in a knapsack of capacity %.2f is: %.2f\n&quot;, W,
computeMaxValue(W, weight, value, ratio, nItems));

return 0;
}

double computeMaxValue(double W, double weight[], double value[], double
ratio[], int nItems) {
double cW = 0; // current weight
double cV = 0; // current value

printf(&quot;\nItems considered are: &quot;);
while (cW &lt; W) {
int item = getNextItem(weight, value, ratio, nItems); // get next highest ratio
if (item == -1) {
// No items left
break;
}

printf(&quot;%d &quot;, item + 1);
if (cW + weight[item] &lt;= W) {
cW += weight[item];
cV += value[item];
// mark as used for the getNext() (ratio) function
ratio[item] = 0;
} else {
cV += (ratio[item] * (W - cW)); // Break the value and add
cW += (W - cW);

break; // the knapsack is full
}
}
return cV;
}

// Method to get the next highest ratio
int getNextItem(double weight[], double value[], double ratio[], int nItems) {
double highest = 0;
int index = -1;
for (int i = 0; i &lt; nItems; i++) {
if (ratio[i] &gt; highest) {
highest = ratio[i];
index = i;
}
}
return index;
}
