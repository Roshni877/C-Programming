#include &lt;stdio.h&gt;
#define MAX 20

void floyd(int n, int d[MAX][MAX], int w[MAX][MAX]);
int min(int a, int b);

int main() {
int d[MAX][MAX]; // Temporary 2-D array for calculation
int w[MAX][MAX]; // 2-D array to store weight/cost matrix
int i, j, n;

printf(&quot;Enter the number of nodes/vertices: &quot;);
scanf(&quot;%d&quot;, &amp;n);

printf(&quot;Enter the Weight/cost matrix:\n&quot;);
for(i = 1; i &lt;= n; i++) {
for(j = 1; j &lt;= n; j++) {
scanf(&quot;%d&quot;, &amp;w[i][j]);
}

}

floyd(n, d, w);

return 0;
}

void floyd(int n, int d[MAX][MAX], int w[MAX][MAX]) {
int i, j, k;

for(i = 1; i &lt;= n; i++) {
for(j = 1; j &lt;= n; j++) {
d[i][j] = w[i][j];
}
}

// Calculation of All-pair shortest paths
for(k = 1; k &lt;= n; k++) {
for(i = 1; i &lt;= n; i++) {
for(j = 1; j &lt;= n; j++) {
d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
}

}
}

printf(&quot;All pair shortest path matrix is:\n&quot;);
for(i = 1; i &lt;= n; i++) {
printf(&quot;\t%d&quot;, i);
}

printf(&quot;\n\t--------------------------------------------\n&quot;);
for(i = 1; i &lt;= n; i++) {
printf(&quot;%d|\t&quot;, i);
for(j = 1; j &lt;= n; j++) {
printf(&quot;%d\t&quot;, d[i][j]);
}
printf(&quot;\n&quot;);
}
}

// Method to find the minimum of two numbers
int min(int a, int b) {
return (a &lt; b) ? a : b;
}
