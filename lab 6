#include &lt;stdio.h&gt;
#define MAX_ITEMS 10
int knapSack(int W, int wt[], int val[], int n);
int max(int a, int b);

int main() {
int i;
int n; // No of items
int W; // Capacity of the knapsack
int wt[MAX_ITEMS]; // Weights of &#39;n&#39; items
int val[MAX_ITEMS]; // Values of &#39;n&#39; items

printf(&quot;Enter the number of items: &quot;);
scanf(&quot;%d&quot;, &amp;n);

printf(&quot;Enter the weights of the items:\n&quot;);
for (i = 1; i &lt;= n; i++) {
scanf(&quot;%d&quot;, &amp;wt[i]);
}

printf(&quot;Enter the values of the items:\n&quot;);
for (i = 1; i &lt;= n; i++) {
scanf(&quot;%d&quot;, &amp;val[i]);
}

printf(&quot;Enter the capacity of the knapsack: &quot;);
scanf(&quot;%d&quot;, &amp;W);

printf(&quot;The maximum value in knapsack of capacity %d is: %d\n&quot;, W,
knapSack(W, wt, val, n));

return 0;
}

// Returns the maximum value that can be put in a knapsack of capacity W
int knapSack(int W, int wt[], int val[], int n) {
int i, j;
int v[MAX_ITEMS+1][W+1];

// Build table v[][] in bottom up manner
for (i = 0; i &lt;= n; i++) {
for (j = 0; j &lt;= W; j++) {

if (i == 0 || j == 0) {
v[i][j] = 0;
} else if (j - wt[i] &lt; 0) {
v[i][j] = v[i-1][j];
} else {
v[i][j] = max(v[i-1][j], val[i] + v[i-1][j - wt[i]]);
}
}
}

return v[n][W];
}

int max(int a, int b) {
return (a &gt; b) ? a : b;
}
